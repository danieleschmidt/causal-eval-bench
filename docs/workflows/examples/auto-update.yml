# Auto-update Dependencies Workflow
# This workflow automatically updates dependencies and creates PRs

name: Auto-update Dependencies

on:
  schedule:
    # Run every Monday at 9 AM UTC
    - cron: '0 9 * * 1'
  workflow_dispatch:
    inputs:
      update_type:
        description: 'Type of update to perform'
        required: true
        default: 'minor'
        type: choice
        options:
          - patch
          - minor
          - major

jobs:
  update-python-deps:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          version: 1.7.1

      - name: Configure Poetry
        run: |
          poetry config virtualenvs.create true
          poetry config virtualenvs.in-project true

      - name: Update Python dependencies
        run: |
          poetry update
          poetry export --format requirements.txt --output requirements.txt --without-hashes

      - name: Check for security vulnerabilities
        run: |
          poetry add --group dev safety
          poetry run safety check

      - name: Run tests with updated dependencies
        run: |
          poetry install
          poetry run pytest tests/ -x --tb=short

      - name: Create Pull Request for Python updates
        uses: peter-evans/create-pull-request@v5
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          commit-message: 'chore: update Python dependencies'
          title: 'Auto-update Python dependencies'
          body: |
            This PR updates Python dependencies to their latest compatible versions.
            
            ## Changes
            - Updated Poetry lock file
            - Updated requirements.txt
            - All tests passing with new dependencies
            
            ## Security
            - ✅ Security vulnerabilities checked with Safety
            
            **Auto-generated by dependency update workflow**
          branch: auto-update/python-deps
          delete-branch: true
          labels: |
            dependencies
            automated
            python

  update-docker-images:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Update Docker base images
        run: |
          # Update Python base image in Dockerfile
          CURRENT_VERSION=$(grep "FROM python:" Dockerfile | head -1 | cut -d: -f2 | cut -d- -f1)
          LATEST_VERSION=$(curl -s https://registry.hub.docker.com/v2/repositories/library/python/tags/?page_size=100 | jq -r '.results[] | select(.name | test("^[0-9]+\\.[0-9]+-slim-bullseye$")) | .name' | sort -V | tail -1 | cut -d- -f1)
          
          if [ "$CURRENT_VERSION" != "$LATEST_VERSION" ]; then
            sed -i "s/python:${CURRENT_VERSION}/python:${LATEST_VERSION}/g" Dockerfile
            echo "Updated Python from $CURRENT_VERSION to $LATEST_VERSION"
          fi

      - name: Update docker-compose images
        run: |
          # Update PostgreSQL version
          CURRENT_PG=$(grep "postgres:" docker-compose.yml | cut -d: -f3)
          LATEST_PG=$(curl -s https://registry.hub.docker.com/v2/repositories/library/postgres/tags/?page_size=100 | jq -r '.results[] | select(.name | test("^[0-9]+-alpine$")) | .name' | sort -V | tail -1)
          
          if [ "$CURRENT_PG" != "$LATEST_PG" ]; then
            sed -i "s/postgres:${CURRENT_PG}/postgres:${LATEST_PG}/g" docker-compose.yml
            echo "Updated PostgreSQL from $CURRENT_PG to $LATEST_PG"
          fi

      - name: Test Docker build
        run: |
          docker build --target development -t test-image .
          docker run --rm test-image python --version

      - name: Create Pull Request for Docker updates
        uses: peter-evans/create-pull-request@v5
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          commit-message: 'chore: update Docker base images'
          title: 'Auto-update Docker base images'
          body: |
            This PR updates Docker base images to their latest versions.
            
            ## Changes
            - Updated Python base image
            - Updated PostgreSQL image
            - Docker build tested successfully
            
            **Auto-generated by dependency update workflow**
          branch: auto-update/docker-images
          delete-branch: true
          labels: |
            dependencies
            automated
            docker

  update-github-actions:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Update GitHub Actions
        uses: renovatebot/github-action@v39.2.4
        with:
          configurationFile: .github/renovate.json
          token: ${{ secrets.GITHUB_TOKEN }}

  create-security-update-pr:
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch' && github.event.inputs.update_type == 'security'
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Run security audit
        run: |
          # Python security audit
          pip install safety
          safety check --json > security-report.json || true
          
          # Docker security scan
          docker run --rm -v $(pwd):/workspace aquasec/trivy fs /workspace > trivy-report.txt || true

      - name: Create security update issue
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            
            let body = '## Security Audit Report\n\n';
            
            try {
              const securityReport = JSON.parse(fs.readFileSync('security-report.json', 'utf8'));
              if (securityReport.length > 0) {
                body += '### Python Dependencies\n';
                securityReport.forEach(vuln => {
                  body += `- **${vuln.package_name}**: ${vuln.advisory}\n`;
                });
              }
            } catch (e) {
              body += '### Python Dependencies\n✅ No vulnerabilities found\n';
            }
            
            try {
              const trivyReport = fs.readFileSync('trivy-report.txt', 'utf8');
              body += '\n### Container Security\n';
              body += '```\n' + trivyReport + '\n```\n';
            } catch (e) {
              body += '\n### Container Security\n✅ No vulnerabilities found\n';
            }
            
            github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: 'Security Audit Report - ' + new Date().toISOString().split('T')[0],
              body: body,
              labels: ['security', 'audit']
            });