# Docker Compose Override Example
# Copy this file to docker-compose.override.yml and customize for your environment
# This file is automatically loaded by docker-compose and overrides base configuration

version: '3.8'

services:
  # =============================================================================
  # Application Overrides
  # =============================================================================
  app:
    # Override for development
    environment:
      # Custom API keys (replace with your actual keys)
      - OPENAI_API_KEY=sk-your-openai-key-here
      - ANTHROPIC_API_KEY=sk-ant-your-anthropic-key-here
      - HUGGINGFACE_API_TOKEN=hf_your-token-here
      
      # Debug settings
      - DEBUG=true
      - LOG_LEVEL=DEBUG
      - API_RELOAD=true
      
      # Custom database settings
      - DATABASE_URL=postgresql://custom_user:custom_pass@postgres:5432/custom_db
      
    # Custom port mappings
    ports:
      - "8000:8000"  # API
      - "5678:5678"  # Debug port
    
    # Mount source code for hot reloading
    volumes:
      - .:/app
      - /app/__pycache__
      - /app/.venv
      
    # Custom command for development
    command: ["uvicorn", "causal_eval.api.main:app", "--host", "0.0.0.0", "--port", "8000", "--reload", "--log-level", "debug"]

  # =============================================================================
  # Database Overrides
  # =============================================================================
  postgres:
    environment:
      # Custom database configuration
      - POSTGRES_DB=custom_db
      - POSTGRES_USER=custom_user
      - POSTGRES_PASSWORD=custom_pass
      
    # Expose port for external access
    ports:
      - "5432:5432"
      
    # Custom initialization scripts
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./docker/postgres/custom-init.sql:/docker-entrypoint-initdb.d/custom-init.sql:ro

  # =============================================================================
  # Redis Overrides
  # =============================================================================
  redis:
    # Custom Redis configuration
    volumes:
      - redis_data:/data
      - ./docker/redis/custom-redis.conf:/etc/redis/redis.conf:ro
      
    # Expose port for external access
    ports:
      - "6379:6379"

  # =============================================================================
  # Development Tools
  # =============================================================================
  jupyter:
    # Add Jupyter notebook server for development
    build:
      context: .
      target: development
    container_name: causal-eval-jupyter
    ports:
      - "8888:8888"
    environment:
      - JUPYTER_ENABLE_LAB=yes
      - JUPYTER_TOKEN=development
    volumes:
      - .:/app
      - jupyter_data:/home/appuser/.jupyter
    networks:
      - causal-eval-network
    command: ["jupyter", "lab", "--ip=0.0.0.0", "--port=8888", "--no-browser", "--allow-root", "--LabApp.token=development"]
    profiles:
      - development

  pgadmin:
    # Database administration interface
    image: dpage/pgadmin4:latest
    container_name: causal-eval-pgadmin
    environment:
      - PGADMIN_DEFAULT_EMAIL=admin@causal-eval.com
      - PGADMIN_DEFAULT_PASSWORD=admin123
      - PGADMIN_CONFIG_SERVER_MODE=False
    ports:
      - "5050:80"
    volumes:
      - pgadmin_data:/var/lib/pgadmin
    networks:
      - causal-eval-network
    depends_on:
      - postgres
    profiles:
      - development

  redis-commander:
    # Redis administration interface
    image: rediscommander/redis-commander:latest
    container_name: causal-eval-redis-commander
    environment:
      - REDIS_HOSTS=local:redis:6379
    ports:
      - "8081:8081"
    networks:
      - causal-eval-network
    depends_on:
      - redis
    profiles:
      - development

  # =============================================================================
  # Production Overrides
  # =============================================================================
  nginx-prod:
    # Production nginx with SSL
    extends:
      service: nginx
    volumes:
      - ./docker/nginx/nginx-prod.conf:/etc/nginx/nginx.conf:ro
      - ./docker/nginx/ssl:/etc/nginx/ssl:ro
      - ./docker/nginx/logs:/var/log/nginx
    environment:
      - NGINX_WORKER_PROCESSES=auto
      - NGINX_WORKER_CONNECTIONS=1024
    profiles:
      - production

  app-prod:
    # Production app configuration
    extends:
      service: app
    build:
      target: production
    environment:
      - ENVIRONMENT=production
      - DEBUG=false
      - LOG_LEVEL=INFO
      - API_WORKERS=4
    deploy:
      replicas: 3
      resources:
        limits:
          cpus: '1.0'
          memory: 1G
        reservations:
          cpus: '0.5'
          memory: 512M
    profiles:
      - production

  # =============================================================================
  # Testing Overrides
  # =============================================================================
  test-integration:
    # Integration testing with real services
    extends:
      service: test
    environment:
      - TEST_TYPE=integration
      - DATABASE_URL=postgresql://causal_eval_user:causal_eval_password@postgres:5432/causal_eval_bench_test
      - REDIS_URL=redis://redis:6379/2
    command: ["python", "-m", "pytest", "tests/integration/", "-v", "--tb=short"]
    profiles:
      - testing

  test-e2e:
    # End-to-end testing
    extends:
      service: test
    environment:
      - TEST_TYPE=e2e
      - TARGET_URL=http://app:8000
    depends_on:
      - app
      - postgres
      - redis
    command: ["python", "-m", "pytest", "tests/e2e/", "-v", "--tb=short"]
    profiles:
      - testing

  # =============================================================================
  # Load Testing
  # =============================================================================
  locust-master:
    # Locust master for distributed load testing
    build:
      context: .
      target: development
    container_name: causal-eval-locust-master
    ports:
      - "8089:8089"
    environment:
      - LOCUST_HOST=http://app:8000
      - LOCUST_MODE=master
    volumes:
      - ./tests/load:/app/tests/load
    networks:
      - causal-eval-network
    command: ["locust", "-f", "tests/load/locustfile.py", "--master", "--host", "http://app:8000"]
    profiles:
      - load-testing

  locust-worker:
    # Locust workers for distributed load testing
    build:
      context: .
      target: development
    environment:
      - LOCUST_HOST=http://app:8000
      - LOCUST_MODE=worker
      - LOCUST_MASTER_HOST=locust-master
    volumes:
      - ./tests/load:/app/tests/load
    networks:
      - causal-eval-network
    command: ["locust", "-f", "tests/load/locustfile.py", "--worker", "--master-host", "locust-master"]
    depends_on:
      - locust-master
    deploy:
      replicas: 2
    profiles:
      - load-testing

# =============================================================================
# Additional Volumes
# =============================================================================
volumes:
  jupyter_data:
    driver: local
  pgadmin_data:
    driver: local

# =============================================================================
# Usage Examples:
# =============================================================================
#
# Development with tools:
#   docker-compose --profile development up
#
# Production simulation:
#   docker-compose --profile production up
#
# Testing environment:
#   docker-compose --profile testing up test-integration
#
# Load testing:
#   docker-compose --profile load-testing up
#
# Custom environment variables:
#   Copy this file to docker-compose.override.yml and modify as needed