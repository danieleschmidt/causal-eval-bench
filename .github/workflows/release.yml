name: Release

on:
  push:
    branches:
      - main
  workflow_dispatch:
    inputs:
      release_type:
        description: 'Release type'
        required: true
        default: 'patch'
        type: choice
        options:
          - patch
          - minor
          - major

env:
  PYTHON_VERSION: '3.11'
  POETRY_VERSION: '1.6.1'

jobs:
  release:
    name: Create Release
    runs-on: ubuntu-latest
    if: "!contains(github.event.head_commit.message, 'chore(release)')"
    
    outputs:
      released: ${{ steps.release.outputs.released }}
      version: ${{ steps.release.outputs.version }}
      tag: ${{ steps.release.outputs.tag }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          version: ${{ env.POETRY_VERSION }}

      - name: Install dependencies
        run: poetry install --no-interaction

      - name: Configure Git
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

      - name: Determine release type
        id: release-type
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            echo "release_type=${{ github.event.inputs.release_type }}" >> $GITHUB_OUTPUT
          else
            # Analyze commit messages for semantic release
            if git log --oneline -1 | grep -E "BREAKING CHANGE|!:"; then
              echo "release_type=major" >> $GITHUB_OUTPUT
            elif git log --oneline -1 | grep -E "feat:"; then
              echo "release_type=minor" >> $GITHUB_OUTPUT
            else
              echo "release_type=patch" >> $GITHUB_OUTPUT
            fi
          fi

      - name: Bump version
        id: version
        run: |
          poetry version ${{ steps.release-type.outputs.release_type }}
          NEW_VERSION=$(poetry version -s)
          echo "version=$NEW_VERSION" >> $GITHUB_OUTPUT
          echo "tag=v$NEW_VERSION" >> $GITHUB_OUTPUT

      - name: Update CHANGELOG
        run: |
          # Generate changelog entry
          echo "## [${{ steps.version.outputs.version }}] - $(date +%Y-%m-%d)" > CHANGELOG_NEW.md
          echo "" >> CHANGELOG_NEW.md
          
          # Get commits since last tag
          LAST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "")
          if [[ -n "$LAST_TAG" ]]; then
            git log $LAST_TAG..HEAD --pretty=format:"- %s" >> CHANGELOG_NEW.md
          else
            git log --pretty=format:"- %s" >> CHANGELOG_NEW.md
          fi
          
          echo "" >> CHANGELOG_NEW.md
          echo "" >> CHANGELOG_NEW.md
          
          # Prepend to existing changelog
          if [[ -f CHANGELOG.md ]]; then
            cat CHANGELOG.md >> CHANGELOG_NEW.md
          fi
          mv CHANGELOG_NEW.md CHANGELOG.md

      - name: Commit version bump
        run: |
          git add pyproject.toml CHANGELOG.md
          git commit -m "chore(release): ${{ steps.version.outputs.version }}"
          git tag ${{ steps.version.outputs.tag }}

      - name: Push changes
        run: |
          git push origin main
          git push origin ${{ steps.version.outputs.tag }}

      - name: Build package
        run: poetry build

      - name: Create GitHub Release
        id: release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.version.outputs.tag }}
          release_name: Release ${{ steps.version.outputs.version }}
          body: |
            ## Changes in ${{ steps.version.outputs.version }}
            
            ### What's Changed
            See [CHANGELOG.md](CHANGELOG.md) for detailed changes.
            
            ### Installation
            ```bash
            pip install causal-eval-bench==${{ steps.version.outputs.version }}
            ```
            
            ### Docker
            ```bash
            docker pull ghcr.io/${{ github.repository }}:${{ steps.version.outputs.tag }}
            ```
            
            **Full Changelog**: https://github.com/${{ github.repository }}/compare/${{ steps.version.outputs.tag }}...HEAD
          draft: false
          prerelease: false

      - name: Upload package to release
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.release.outputs.upload_url }}
          asset_path: dist/causal_eval_bench-${{ steps.version.outputs.version }}-py3-none-any.whl
          asset_name: causal_eval_bench-${{ steps.version.outputs.version }}-py3-none-any.whl
          asset_content_type: application/zip

      - name: Upload source to release
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.release.outputs.upload_url }}
          asset_path: dist/causal-eval-bench-${{ steps.version.outputs.version }}.tar.gz
          asset_name: causal-eval-bench-${{ steps.version.outputs.version }}.tar.gz
          asset_content_type: application/gzip

      - name: Set outputs
        run: |
          echo "released=true" >> $GITHUB_OUTPUT
          echo "version=${{ steps.version.outputs.version }}" >> $GITHUB_OUTPUT
          echo "tag=${{ steps.version.outputs.tag }}" >> $GITHUB_OUTPUT

  publish-pypi:
    name: Publish to PyPI
    runs-on: ubuntu-latest
    needs: [release]
    if: needs.release.outputs.released == 'true'
    environment:
      name: pypi
      url: https://pypi.org/project/causal-eval-bench/
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: ${{ needs.release.outputs.tag }}

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          version: ${{ env.POETRY_VERSION }}

      - name: Build package
        run: poetry build

      - name: Publish to PyPI
        run: |
          poetry config pypi-token.pypi ${{ secrets.PYPI_API_TOKEN }}
          poetry publish

  publish-docker:
    name: Publish Docker Image
    runs-on: ubuntu-latest
    needs: [release]
    if: needs.release.outputs.released == 'true'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: ${{ needs.release.outputs.tag }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/${{ github.repository }}
          tags: |
            type=ref,event=tag
            type=raw,value=latest
            type=raw,value=${{ needs.release.outputs.version }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  notify:
    name: Notify Release
    runs-on: ubuntu-latest
    needs: [release, publish-pypi, publish-docker]
    if: always() && needs.release.outputs.released == 'true'
    
    steps:
      - name: Notify Slack
        uses: 8398a7/action-slack@v3
        with:
          status: success
          text: |
            üéâ New release published!
            
            **Version**: ${{ needs.release.outputs.version }}
            **Tag**: ${{ needs.release.outputs.tag }}
            **PyPI**: ${{ needs.publish-pypi.result }}
            **Docker**: ${{ needs.publish-docker.result }}
            
            [View Release](https://github.com/${{ github.repository }}/releases/tag/${{ needs.release.outputs.tag }})
          webhook_url: ${{ secrets.SLACK_WEBHOOK_URL }}
        if: success()

      - name: Notify failure
        uses: 8398a7/action-slack@v3
        with:
          status: failure
          text: |
            ‚ùå Release process failed!
            
            **Version**: ${{ needs.release.outputs.version }}
            **Tag**: ${{ needs.release.outputs.tag }}
            
            [View Workflow](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})
          webhook_url: ${{ secrets.SLACK_WEBHOOK_URL }}
        if: failure()
