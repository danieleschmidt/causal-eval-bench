# Automated Dependency Updates for Causal Eval Bench
# Keeps dependencies up-to-date with security scanning

name: Dependency Updates

on:
  schedule:
    # Run weekly on Mondays at 6 AM UTC
    - cron: '0 6 * * 1'
  workflow_dispatch:
    inputs:
      update_type:
        description: 'Type of updates to process'
        required: true
        default: 'all'
        type: choice
        options:
        - all
        - security
        - minor
        - patch

concurrency:
  group: dependency-updates
  cancel-in-progress: false

env:
  PYTHON_VERSION: "3.11"
  POETRY_VERSION: "1.7.1"

jobs:
  # =============================================================================
  # DEPENDENCY ANALYSIS
  # =============================================================================
  analyze-dependencies:
    name: Analyze Current Dependencies
    runs-on: ubuntu-latest
    timeout-minutes: 15
    outputs:
      has-updates: ${{ steps.check-updates.outputs.has-updates }}
      security-updates: ${{ steps.check-updates.outputs.security-updates }}
      update-summary: ${{ steps.check-updates.outputs.update-summary }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install Poetry
      run: |
        curl -sSL https://install.python-poetry.org | python3 -
        echo "$HOME/.local/bin" >> $GITHUB_PATH

    - name: Install dependencies
      run: |
        poetry install --with dev

    - name: Check for dependency updates
      id: check-updates
      run: |
        # Check for outdated packages
        poetry show --outdated --format json > outdated.json || echo '[]' > outdated.json
        
        # Analyze updates
        python3 -c "
        import json, re
        
        with open('outdated.json', 'r') as f:
          outdated = json.load(f) if f.read().strip() else []
        
        if not outdated:
          print('has-updates=false' >> '$GITHUB_OUTPUT')
          print('No updates available')
          exit(0)
        
        security_updates = []
        minor_updates = []
        major_updates = []
        
        for pkg in outdated:
          name = pkg['name']
          current = pkg['version']
          latest = pkg['latest']
          
          # Parse version numbers
          current_parts = [int(x) for x in current.split('.') if x.isdigit()]
          latest_parts = [int(x) for x in latest.split('.') if x.isdigit()]
          
          # Determine update type
          if len(current_parts) >= 1 and len(latest_parts) >= 1:
            if current_parts[0] < latest_parts[0]:
              major_updates.append(f'{name}: {current} -> {latest}')
            elif len(current_parts) >= 2 and len(latest_parts) >= 2 and current_parts[1] < latest_parts[1]:
              minor_updates.append(f'{name}: {current} -> {latest}')
            else:
              # Check if it's a security update (simplified check)
              # In real scenarios, you'd check CVE databases
              security_updates.append(f'{name}: {current} -> {latest}')
        
        # Output results
        print(f'has-updates=true')
        print(f'security-updates={len(security_updates)}')
        
        summary = f'Security: {len(security_updates)}, Minor: {len(minor_updates)}, Major: {len(major_updates)}'
        print(f'update-summary={summary}')
        
        # Write detailed report
        with open('update-report.md', 'w') as f:
          f.write('# Dependency Update Report\\n\\n')
          if security_updates:
            f.write('## 🚨 Security Updates\\n\\n')
            for update in security_updates:
              f.write(f'- {update}\\n')
            f.write('\\n')
          if minor_updates:
            f.write('## 📦 Minor Updates\\n\\n')
            for update in minor_updates:
              f.write(f'- {update}\\n')
            f.write('\\n')
          if major_updates:
            f.write('## ⚠️ Major Updates (Manual Review Required)\\n\\n')
            for update in major_updates:
              f.write(f'- {update}\\n')
        " >> $GITHUB_OUTPUT

    - name: Upload dependency analysis
      uses: actions/upload-artifact@v3
      with:
        name: dependency-analysis
        path: |
          outdated.json
          update-report.md

  # =============================================================================
  # SECURITY UPDATES (AUTO-MERGE)
  # =============================================================================
  security-updates:
    name: Apply Security Updates
    runs-on: ubuntu-latest  
    timeout-minutes: 30
    needs: [analyze-dependencies]
    if: needs.analyze-dependencies.outputs.security-updates != '0'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install Poetry
      run: |
        curl -sSL https://install.python-poetry.org | python3 -
        echo "$HOME/.local/bin" >> $GITHUB_PATH

    - name: Configure Git
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"

    - name: Create security update branch
      run: |
        git checkout -b automated/security-updates-$(date +%Y%m%d)

    - name: Update security-related dependencies
      run: |
        # Update dependencies with known security vulnerabilities
        poetry update --dry-run > update-preview.txt
        
        # Apply security updates (this is a simplified approach)
        # In production, you'd want more sophisticated logic to identify security updates
        poetry update

    - name: Run security scan on updates
      run: |
        poetry install --with dev
        poetry run safety check
        poetry run bandit -r causal_eval/ -ll

    - name: Run tests with updates
      run: |
        # Run test suite to ensure updates don't break functionality
        poetry run pytest tests/unit/ -x --tb=short
        poetry run pytest tests/integration/ -x --tb=short

    - name: Commit security updates
      run: |
        git add poetry.lock pyproject.toml
        git commit -m "security: automated security dependency updates

        - Updated dependencies with security vulnerabilities
        - All tests pass with new versions
        - Security scan completed successfully
        
        Auto-generated by dependency-update workflow"

    - name: Push security update branch
      run: |
        git push origin HEAD

    - name: Create security update PR
      uses: actions/github-script@v6
      with:
        script: |
          const branchName = `automated/security-updates-${new Date().toISOString().slice(0,10).replace(/-/g,'')}`;
          
          const { data: pr } = await github.rest.pulls.create({
            owner: context.repo.owner,
            repo: context.repo.repo,
            title: '🔒 Automated Security Dependency Updates',
            head: branchName,
            base: 'main',
            body: `
            ## 🚨 Security Updates
            
            This PR contains automated security updates for dependencies with known vulnerabilities.
            
            ### ✅ Validation Completed
            - [x] Security scan passed
            - [x] Unit tests passed  
            - [x] Integration tests passed
            - [x] No breaking changes detected
            
            ### 📋 Update Summary
            ${{ needs.analyze-dependencies.outputs.update-summary }}
            
            ### 🤖 Automated Checks
            This PR was automatically created and tested. It can be safely merged if all checks pass.
            
            ### 📚 Resources
            - [Security Policy](../SECURITY.md)
            - [Dependency Management](../docs/development/dependencies.md)
            `,
            draft: false
          });
          
          // Add security label
          await github.rest.issues.addLabels({
            owner: context.repo.owner,
            repo: context.repo.repo,
            issue_number: pr.number,
            labels: ['security', 'dependencies', 'automated']
          });
          
          // Enable auto-merge for security updates
          await github.rest.pulls.createReviewRequest({
            owner: context.repo.owner,
            repo: context.repo.repo,
            pull_request_number: pr.number,
            reviewers: [], // Add security team members
            team_reviewers: ['security-team'] // If you have a security team
          });

  # =============================================================================
  # MINOR/PATCH UPDATES
  # =============================================================================
  minor-updates:
    name: Apply Minor Updates
    runs-on: ubuntu-latest
    timeout-minutes: 45
    needs: [analyze-dependencies]
    if: needs.analyze-dependencies.outputs.has-updates == 'true' && (github.event.inputs.update_type == 'all' || github.event.inputs.update_type == 'minor')
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install Poetry
      run: |
        curl -sSL https://install.python-poetry.org | python3 -
        echo "$HOME/.local/bin" >> $GITHUB_PATH

    - name: Configure Git
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"

    - name: Create minor update branch
      run: |
        git checkout -b automated/minor-updates-$(date +%Y%m%d)

    - name: Update minor dependencies
      run: |
        # Create backup of current lock file
        cp poetry.lock poetry.lock.backup
        
        # Update dependencies (excluding major version bumps)
        poetry update
        
        # Check what changed
        git diff poetry.lock > dependency-changes.diff

    - name: Run comprehensive tests
      run: |
        poetry install --with dev,test
        
        # Run full test suite
        poetry run pytest tests/ --tb=short --maxfail=5
        
        # Run linting
        poetry run ruff check .
        poetry run mypy causal_eval/
        
        # Run security checks
        poetry run safety check
        poetry run bandit -r causal_eval/ -ll

    - name: Run performance regression tests
      continue-on-error: true
      run: |
        # Run performance tests to check for regressions
        poetry run pytest tests/performance/ --benchmark-only --benchmark-json=benchmark-new.json
        
        # Compare with baseline (if available)
        if [[ -f benchmark-baseline.json ]]; then
          python3 -c "
          import json
          
          try:
            with open('benchmark-baseline.json', 'r') as f:
              baseline = json.load(f)
            with open('benchmark-new.json', 'r') as f:
              new = json.load(f)
            
            # Simple regression check
            for test in new['benchmarks']:
              test_name = test['name']
              new_time = test['stats']['mean']
              
              # Find corresponding baseline test
              baseline_test = next((t for t in baseline['benchmarks'] if t['name'] == test_name), None)
              if baseline_test:
                baseline_time = baseline_test['stats']['mean']
                regression = (new_time - baseline_time) / baseline_time * 100
                
                if regression > 20:  # 20% regression threshold
                  print(f'⚠️  Performance regression detected in {test_name}: {regression:.1f}%')
                else:
                  print(f'✅ {test_name} performance: {regression:+.1f}%')
          except Exception as e:
            print(f'Could not compare performance: {e}')
          "
        fi

    - name: Generate update report
      run: |
        echo "# Dependency Update Report" > update-report.md
        echo "" >> update-report.md
        echo "**Update Date:** $(date -u +%Y-%m-%dT%H:%M:%SZ)" >> update-report.md
        echo "**Update Type:** Minor/Patch" >> update-report.md
        echo "" >> update-report.md
        
        echo "## 📦 Updated Dependencies" >> update-report.md
        echo "" >> update-report.md
        
        # Parse dependency changes
        if [[ -f dependency-changes.diff ]]; then
          echo '```diff' >> update-report.md
          head -50 dependency-changes.diff >> update-report.md
          echo '```' >> update-report.md
        fi
        
        echo "" >> update-report.md
        echo "## ✅ Validation Results" >> update-report.md
        echo "" >> update-report.md
        echo "- [x] All tests pass" >> update-report.md
        echo "- [x] Security scan completed" >> update-report.md
        echo "- [x] Code quality checks pass" >> update-report.md
        echo "- [x] No major performance regressions" >> update-report.md

    - name: Commit minor updates
      run: |
        git add poetry.lock pyproject.toml
        git commit -m "deps: automated minor dependency updates

        Updated minor and patch versions of dependencies.
        All tests pass and security scans completed successfully.
        
        $(cat update-report.md | head -20)
        
        Auto-generated by dependency-update workflow"

    - name: Push minor update branch
      run: |
        git push origin HEAD

    - name: Create minor update PR
      uses: actions/github-script@v6
      with:
        script: |
          const fs = require('fs');
          const branchName = `automated/minor-updates-${new Date().toISOString().slice(0,10).replace(/-/g,'')}`;
          
          let reportContent = '';
          try {
            reportContent = fs.readFileSync('update-report.md', 'utf8');
          } catch (e) {
            reportContent = 'Update report not available';
          }
          
          const { data: pr } = await github.rest.pulls.create({
            owner: context.repo.owner,
            repo: context.repo.repo,
            title: '📦 Automated Minor Dependency Updates',
            head: branchName,
            base: 'main',
            body: `
            ## 📦 Minor Dependency Updates
            
            This PR contains automated minor and patch updates for project dependencies.
            
            ${reportContent}
            
            ### 🤖 Automated Validation
            - [x] Full test suite passed
            - [x] Security scans completed
            - [x] Code quality checks passed
            - [x] Performance regression tests run
            
            ### 👀 Review Required
            Please review the changes and ensure:
            - No unexpected behavioral changes
            - All critical functionality works as expected
            - Performance is within acceptable ranges
            
            **This PR requires manual review before merging.**
            `,
            draft: false
          });
          
          await github.rest.issues.addLabels({
            owner: context.repo.owner,
            repo: context.repo.repo,
            issue_number: pr.number,
            labels: ['dependencies', 'automated', 'minor-update']
          });

  # =============================================================================
  # MAJOR UPDATES (MANUAL REVIEW REQUIRED)
  # =============================================================================
  major-updates:
    name: Identify Major Updates
    runs-on: ubuntu-latest
    timeout-minutes: 15
    needs: [analyze-dependencies]
    if: needs.analyze-dependencies.outputs.has-updates == 'true'
    
    steps:
    - name: Download dependency analysis
      uses: actions/download-artifact@v3
      with:
        name: dependency-analysis

    - name: Create major update issue
      uses: actions/github-script@v6
      with:
        script: |
          const fs = require('fs');
          
          let reportContent = '';
          try {
            reportContent = fs.readFileSync('update-report.md', 'utf8');
          } catch (e) {
            reportContent = 'Report not available';
          }
          
          // Check if there are major updates mentioned in the report
          if (reportContent.includes('Major Updates')) {
            const { data: issue } = await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: '🔄 Major Dependency Updates Available - Manual Review Required',
              body: `
              ## 🚨 Major Dependency Updates Detected
              
              The automated dependency update process has identified major version updates that require manual review.
              
              ${reportContent}
              
              ### ⚠️ Important Notes
              - Major version updates may include breaking changes
              - Thorough testing required before updating
              - Review changelog and migration guides
              - Consider updating dependencies one at a time
              
              ### 📋 Action Items
              - [ ] Review changelog for each major update
              - [ ] Test updates in development environment
              - [ ] Update code if breaking changes exist
              - [ ] Update documentation if APIs changed
              - [ ] Run comprehensive test suite
              - [ ] Update CI/CD if needed
              
              ### 🔗 Resources
              - [Dependency Management Guide](../docs/development/dependencies.md)
              - [Testing Guidelines](../docs/testing/README.md)
              - [Breaking Change Policy](../docs/development/breaking-changes.md)
              
              ---
              
              *This issue was automatically created by the dependency update workflow.*
              *Please close this issue after addressing the major updates.*
              `,
              labels: ['dependencies', 'major-update', 'manual-review-required', 'help wanted']
            });
            
            console.log(`Created issue #${issue.number} for major updates`);
          } else {
            console.log('No major updates found');
          }

  # =============================================================================
  # UPDATE SUMMARY AND NOTIFICATIONS
  # =============================================================================
  notify-results:
    name: Notify Update Results
    runs-on: ubuntu-latest
    needs: [analyze-dependencies, security-updates, minor-updates, major-updates]
    if: always()
    
    steps:
    - name: Determine overall status
      id: status
      run: |
        if [[ "${{ needs.analyze-dependencies.outputs.has-updates }}" == "false" ]]; then
          echo "status=no-updates" >> $GITHUB_OUTPUT
          echo "message=No dependency updates available" >> $GITHUB_OUTPUT
        elif [[ "${{ needs.security-updates.result }}" == "success" || "${{ needs.minor-updates.result }}" == "success" ]]; then
          echo "status=success" >> $GITHUB_OUTPUT
          echo "message=Dependency updates processed successfully" >> $GITHUB_OUTPUT
        else
          echo "status=partial" >> $GITHUB_OUTPUT
          echo "message=Some updates completed, manual review may be required" >> $GITHUB_OUTPUT
        fi

    - name: Notify team
      uses: 8398a7/action-slack@v3
      if: env.SLACK_WEBHOOK_URL != null && steps.status.outputs.status != 'no-updates'
      with:
        status: custom
        custom_payload: |
          {
            channel: '#dependencies',
            username: 'Dependency Bot',
            icon_emoji: ':package:',
            attachments: [{
              color: '${{ steps.status.outputs.status }}' === 'success' ? 'good' : 'warning',
              title: 'Dependency Update Results',
              fields: [{
                title: 'Repository',
                value: '${{ github.repository }}',
                short: true
              }, {
                title: 'Update Summary',
                value: '${{ needs.analyze-dependencies.outputs.update-summary }}',
                short: true
              }, {
                title: 'Status',
                value: '${{ steps.status.outputs.message }}',
                short: false
              }],
              actions: [{
                type: 'button',
                text: 'View Workflow',
                url: 'https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}'
              }, {
                type: 'button',
                text: 'View PRs',
                url: 'https://github.com/${{ github.repository }}/pulls?q=is%3Apr+label%3Adependencies'
              }]
            }]
          }
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

  # =============================================================================
  # CLEANUP
  # =============================================================================
  cleanup:
    name: Cleanup Old Update Branches
    runs-on: ubuntu-latest
    if: always()
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Clean up old automated branches
      run: |
        # List automated branches older than 30 days
        OLD_BRANCHES=$(git for-each-ref --format='%(refname:short) %(committerdate)' refs/remotes/origin/automated/ | \
          awk '$2 < "'$(date -d '30 days ago' '+%Y-%m-%d')'"' | awk '{print $1}')
        
        if [[ -n "$OLD_BRANCHES" ]]; then
          echo "Cleaning up old automated branches:"
          echo "$OLD_BRANCHES"
          
          # Delete old branches (uncomment when ready)
          # echo "$OLD_BRANCHES" | while read branch; do
          #   branch_name=${branch#origin/}
          #   git push origin --delete "$branch_name" || true
          # done
        else
          echo "No old automated branches to clean up"
        fi