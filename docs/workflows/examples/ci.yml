# CI Pipeline for Causal Eval Bench
# Comprehensive testing and quality checks for pull requests

name: CI Pipeline

on:
  pull_request:
    branches: [ main, develop ]
  push:
    branches: [ main, develop ]
  workflow_dispatch:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  PYTHON_VERSION: "3.11"
  POETRY_VERSION: "1.7.1"
  POETRY_CACHE_DIR: ~/.cache/pypoetry
  PIP_CACHE_DIR: ~/.cache/pip

jobs:
  # =============================================================================
  # CODE QUALITY CHECKS
  # =============================================================================
  code-quality:
    name: Code Quality
    runs-on: ubuntu-latest
    timeout-minutes: 15
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Cache Poetry dependencies
      uses: actions/cache@v3
      with:
        path: |
          ${{ env.POETRY_CACHE_DIR }}
          ${{ env.PIP_CACHE_DIR }}
        key: poetry-${{ runner.os }}-${{ hashFiles('**/poetry.lock') }}
        restore-keys: |
          poetry-${{ runner.os }}-

    - name: Install Poetry
      run: |
        curl -sSL https://install.python-poetry.org | python3 -
        echo "$HOME/.local/bin" >> $GITHUB_PATH

    - name: Configure Poetry
      run: |
        poetry config virtualenvs.create true
        poetry config virtualenvs.in-project true

    - name: Install dependencies
      run: |
        poetry install --with dev,test,lint

    - name: Run code formatting check (Black)
      run: |
        poetry run black --check --diff .

    - name: Run import sorting check (isort)
      run: |
        poetry run isort --check-only --diff .

    - name: Run linting (Ruff)
      run: |
        poetry run ruff check --output-format=github .

    - name: Run type checking (MyPy)
      run: |
        poetry run mypy causal_eval/

    - name: Run security scanning (Bandit)
      run: |
        poetry run bandit -r causal_eval/ -f json -o bandit-report.json
        poetry run bandit -r causal_eval/ -f txt

    - name: Upload security scan results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: security-scan-results
        path: bandit-report.json

  # =============================================================================
  # TESTING MATRIX
  # =============================================================================
  test:
    name: Tests (Python ${{ matrix.python-version }}, ${{ matrix.os }})
    runs-on: ${{ matrix.os }}
    timeout-minutes: 30
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        python-version: ["3.9", "3.10", "3.11", "3.12"]
        include:
          - os: ubuntu-latest
            cache-path: ~/.cache
          - os: macos-latest
            cache-path: ~/Library/Caches
          - os: windows-latest
            cache-path: ~\AppData\Local\pip\Cache

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: test_password
          POSTGRES_USER: test_user
          POSTGRES_DB: test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Cache dependencies
      uses: actions/cache@v3
      with:
        path: |
          ${{ matrix.cache-path }}
          ~/.cache/pypoetry
        key: ${{ matrix.os }}-py${{ matrix.python-version }}-${{ hashFiles('**/poetry.lock') }}
        restore-keys: |
          ${{ matrix.os }}-py${{ matrix.python-version }}-

    - name: Install Poetry
      run: |
        curl -sSL https://install.python-poetry.org | python3 -
        echo "$HOME/.local/bin" >> $GITHUB_PATH
      shell: bash

    - name: Configure Poetry
      run: |
        poetry config virtualenvs.create true
        poetry config virtualenvs.in-project true

    - name: Install dependencies
      run: |
        poetry install --with dev,test

    - name: Run unit tests
      env:
        ENVIRONMENT: test
        DATABASE_URL: postgresql://test_user:test_password@localhost:5432/test_db
        REDIS_URL: redis://localhost:6379/0
        OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
        ANTHROPIC_API_KEY: ${{ secrets.ANTHROPIC_API_KEY }}
      run: |
        poetry run pytest tests/unit/ -v --cov=causal_eval --cov-report=xml --cov-report=html --junitxml=junit.xml

    - name: Run integration tests
      env:
        ENVIRONMENT: test
        DATABASE_URL: postgresql://test_user:test_password@localhost:5432/test_db
        REDIS_URL: redis://localhost:6379/0
        OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
        ANTHROPIC_API_KEY: ${{ secrets.ANTHROPIC_API_KEY }}
      run: |
        poetry run pytest tests/integration/ -v --junitxml=integration-junit.xml

    - name: Upload test results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: test-results-${{ matrix.os }}-py${{ matrix.python-version }}
        path: |
          junit.xml
          integration-junit.xml
          htmlcov/
          .coverage

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      if: matrix.os == 'ubuntu-latest' && matrix.python-version == '3.11'
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

  # =============================================================================
  # END-TO-END TESTS
  # =============================================================================
  e2e-tests:
    name: End-to-End Tests
    runs-on: ubuntu-latest
    timeout-minutes: 45
    needs: [code-quality]
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: test_password
          POSTGRES_USER: test_user
          POSTGRES_DB: test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install Poetry
      run: |
        curl -sSL https://install.python-poetry.org | python3 -
        echo "$HOME/.local/bin" >> $GITHUB_PATH

    - name: Install dependencies
      run: |
        poetry install --with dev,test

    - name: Run database migrations
      env:
        DATABASE_URL: postgresql://test_user:test_password@localhost:5432/test_db
      run: |
        poetry run alembic upgrade head

    - name: Start application
      env:
        ENVIRONMENT: test
        DATABASE_URL: postgresql://test_user:test_password@localhost:5432/test_db
        REDIS_URL: redis://localhost:6379/0
        OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
        ANTHROPIC_API_KEY: ${{ secrets.ANTHROPIC_API_KEY }}
      run: |
        poetry run uvicorn causal_eval.api.main:app --host 0.0.0.0 --port 8000 &
        sleep 10
        curl -f http://localhost:8000/health

    - name: Run end-to-end tests
      env:
        ENVIRONMENT: test
        API_BASE_URL: http://localhost:8000
        OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
        ANTHROPIC_API_KEY: ${{ secrets.ANTHROPIC_API_KEY }}
      run: |
        poetry run pytest tests/e2e/ -v --junitxml=e2e-junit.xml

    - name: Upload E2E test results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: e2e-test-results
        path: e2e-junit.xml

  # =============================================================================
  # PERFORMANCE TESTS
  # =============================================================================
  performance-tests:
    name: Performance Tests
    runs-on: ubuntu-latest
    timeout-minutes: 30
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install Poetry
      run: |
        curl -sSL https://install.python-poetry.org | python3 -
        echo "$HOME/.local/bin" >> $GITHUB_PATH

    - name: Install dependencies
      run: |
        poetry install --with dev,test

    - name: Run performance tests
      run: |
        poetry run pytest tests/performance/ -v --benchmark-only --benchmark-json=benchmark.json

    - name: Upload performance results
      uses: actions/upload-artifact@v3
      with:
        name: performance-results
        path: benchmark.json

  # =============================================================================
  # DOCKER BUILD
  # =============================================================================
  docker-build:
    name: Docker Build
    runs-on: ubuntu-latest
    timeout-minutes: 20
    needs: [code-quality]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        target: runtime
        push: false
        tags: causal-eval:${{ github.sha }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        build-args: |
          GIT_COMMIT=${{ github.sha }}

    - name: Test Docker image
      run: |
        docker run --rm -d --name test-container \
          -p 8000:8000 \
          -e DATABASE_URL=sqlite:///./test.db \
          causal-eval:${{ github.sha }}
        
        sleep 10
        curl -f http://localhost:8000/health
        docker stop test-container

    - name: Run container security scan
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: causal-eval:${{ github.sha }}
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: Upload security scan results
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

  # =============================================================================
  # DOCUMENTATION BUILD
  # =============================================================================
  docs-build:
    name: Documentation Build
    runs-on: ubuntu-latest
    timeout-minutes: 10
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install Poetry
      run: |
        curl -sSL https://install.python-poetry.org | python3 -
        echo "$HOME/.local/bin" >> $GITHUB_PATH

    - name: Install dependencies
      run: |
        poetry install --with docs

    - name: Build documentation
      run: |
        poetry run mkdocs build --strict

    - name: Upload documentation
      uses: actions/upload-artifact@v3
      with:
        name: documentation
        path: site/

  # =============================================================================
  # DEPENDENCY VULNERABILITY SCAN
  # =============================================================================
  dependency-scan:
    name: Dependency Vulnerability Scan
    runs-on: ubuntu-latest
    timeout-minutes: 10
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install Poetry
      run: |
        curl -sSL https://install.python-poetry.org | python3 -
        echo "$HOME/.local/bin" >> $GITHUB_PATH

    - name: Install dependencies
      run: |
        poetry install --with dev

    - name: Run Safety check
      run: |
        poetry run safety check --json --output safety-report.json
        poetry run safety check

    - name: Upload vulnerability scan results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: dependency-scan-results
        path: safety-report.json

  # =============================================================================
  # FINAL STATUS CHECK
  # =============================================================================
  ci-success:
    name: CI Success
    runs-on: ubuntu-latest
    needs: [code-quality, test, e2e-tests, docker-build, docs-build, dependency-scan]
    if: always()
    
    steps:
    - name: Check CI status
      run: |
        if [[ "${{ needs.code-quality.result }}" == "success" && \
              "${{ needs.test.result }}" == "success" && \
              "${{ needs.e2e-tests.result }}" == "success" && \
              "${{ needs.docker-build.result }}" == "success" && \
              "${{ needs.docs-build.result }}" == "success" && \
              "${{ needs.dependency-scan.result }}" == "success" ]]; then
          echo "✅ All CI checks passed!"
        else
          echo "❌ Some CI checks failed!"
          exit 1
        fi

    - name: Update commit status
      uses: actions/github-script@v6
      if: always()
      with:
        script: |
          const state = '${{ needs.code-quality.result }}' === 'success' && 
                       '${{ needs.test.result }}' === 'success' && 
                       '${{ needs.e2e-tests.result }}' === 'success' && 
                       '${{ needs.docker-build.result }}' === 'success' && 
                       '${{ needs.docs-build.result }}' === 'success' && 
                       '${{ needs.dependency-scan.result }}' === 'success' ? 'success' : 'failure';
          
          await github.rest.repos.createCommitStatus({
            owner: context.repo.owner,
            repo: context.repo.repo,
            sha: context.sha,
            state: state,
            context: 'CI Pipeline',
            description: state === 'success' ? 'All CI checks passed' : 'Some CI checks failed'
          });

# =============================================================================
# NOTIFICATIONS
# =============================================================================
  notify:
    name: Notify Results
    runs-on: ubuntu-latest
    needs: [ci-success]
    if: always() && github.event_name == 'push'
    
    steps:
    - name: Notify Slack
      uses: 8398a7/action-slack@v3
      if: env.SLACK_WEBHOOK_URL != null
      with:
        status: ${{ needs.ci-success.result }}
        channel: '#ci-cd'
        username: 'GitHub Actions'
        icon_emoji: ':github:'
        title: 'CI Pipeline'
        text: |
          Branch: ${{ github.ref }}
          Commit: ${{ github.sha }}
          Status: ${{ needs.ci-success.result }}
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}