name: Continuous Deployment

on:
  release:
    types: [published]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment environment'
        required: true
        default: 'staging'
        type: choice
        options:
          - staging
          - production
      version:
        description: 'Version to deploy (leave empty for latest)'
        required: false
        type: string

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # =============================================================================
  # STAGING DEPLOYMENT
  # =============================================================================
  
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    if: |
      (github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'staging') ||
      (github.event_name == 'push' && github.ref == 'refs/heads/main') ||
      (github.event_name == 'release' && !github.event.release.prerelease)
    environment:
      name: staging
      url: https://staging.causal-eval-bench.org
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-west-2

      - name: Deploy to ECS Staging
        run: |
          # Update ECS service with new image
          aws ecs update-service \
            --cluster causal-eval-staging \
            --service causal-eval-api \
            --force-new-deployment
          
          # Wait for deployment to complete
          aws ecs wait services-stable \
            --cluster causal-eval-staging \
            --services causal-eval-api

      - name: Run smoke tests on staging
        run: |
          # Wait for service to be ready
          sleep 30
          
          # Health check
          curl -f https://staging.causal-eval-bench.org/health || exit 1
          
          # Basic API test
          curl -f https://staging.causal-eval-bench.org/api/v1/health || exit 1

      - name: Run staging integration tests
        run: |
          pip install httpx pytest
          pytest tests/staging/ --base-url=https://staging.causal-eval-bench.org

      - name: Notify deployment success
        uses: 8398a7/action-slack@v3
        with:
          status: success
          text: '✅ Staging deployment successful for ${{ github.sha }}'
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
        if: success()

      - name: Notify deployment failure
        uses: 8398a7/action-slack@v3
        with:
          status: failure
          text: '❌ Staging deployment failed for ${{ github.sha }}'
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
        if: failure()

  # =============================================================================
  # PRODUCTION DEPLOYMENT
  # =============================================================================
  
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [deploy-staging]
    if: |
      (github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'production') ||
      (github.event_name == 'release' && !github.event.release.prerelease)
    environment:
      name: production
      url: https://causal-eval-bench.org
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID_PROD }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY_PROD }}
          aws-region: us-west-2

      - name: Pre-deployment backup
        run: |
          # Create database backup
          aws rds create-db-snapshot \
            --db-instance-identifier causal-eval-prod \
            --db-snapshot-identifier "causal-eval-prod-$(date +%Y%m%d-%H%M%S)"
          
          # Wait for backup to complete
          aws rds wait db-snapshot-completed \
            --db-snapshot-identifier "causal-eval-prod-$(date +%Y%m%d-%H%M%S)"

      - name: Blue-Green Deployment
        run: |
          # Get current target group
          CURRENT_TG=$(aws elbv2 describe-target-groups \
            --names causal-eval-prod-blue causal-eval-prod-green \
            --query 'TargetGroups[?contains(TargetGroupArn, `blue`)].TargetGroupArn' \
            --output text)
          
          # Determine next target group
          if [[ $CURRENT_TG == *"blue"* ]]; then
            NEW_TG="causal-eval-prod-green"
            OLD_TG="causal-eval-prod-blue"
          else
            NEW_TG="causal-eval-prod-blue"
            OLD_TG="causal-eval-prod-green"
          fi
          
          echo "Deploying to $NEW_TG"
          
          # Update ECS service with new image
          aws ecs update-service \
            --cluster causal-eval-production \
            --service causal-eval-api-$NEW_TG \
            --force-new-deployment
          
          # Wait for deployment to complete
          aws ecs wait services-stable \
            --cluster causal-eval-production \
            --services causal-eval-api-$NEW_TG

      - name: Health checks and validation
        run: |
          # Extended health checks
          for i in {1..10}; do
            if curl -f https://causal-eval-bench.org/health; then
              echo "Health check $i passed"
              sleep 10
            else
              echo "Health check $i failed"
              exit 1
            fi
          done
          
          # Performance validation
          python scripts/validate_deployment.py --env production

      - name: Switch traffic to new deployment
        run: |
          # Update load balancer to point to new target group
          aws elbv2 modify-listener \
            --listener-arn ${{ secrets.PROD_ALB_LISTENER_ARN }} \
            --default-actions Type=forward,TargetGroupArn=$NEW_TG_ARN
          
          echo "Traffic switched to new deployment"

      - name: Monitor deployment
        run: |
          # Monitor for 5 minutes
          sleep 300
          
          # Check error rates
          python scripts/monitor_deployment.py --duration 300

      - name: Cleanup old deployment
        run: |
          # Scale down old deployment after successful monitoring
          aws ecs update-service \
            --cluster causal-eval-production \
            --service causal-eval-api-$OLD_TG \
            --desired-count 0

      - name: Update release notes
        uses: actions/github-script@v6
        with:
          script: |
            const { owner, repo } = context.repo;
            const release = await github.rest.repos.getLatestRelease({
              owner,
              repo
            });
            
            const updateBody = release.data.body + `\n\n✅ **Deployed to Production**: ${new Date().toISOString()}`;
            
            await github.rest.repos.updateRelease({
              owner,
              repo,
              release_id: release.data.id,
              body: updateBody
            });

      - name: Notify production deployment success
        uses: 8398a7/action-slack@v3
        with:
          status: success
          text: '✅ Production deployment successful for ${{ github.sha }}'
          fields: repo,message,commit,author,action,eventName,ref,workflow
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
        if: success()

      - name: Notify production deployment failure
        uses: 8398a7/action-slack@v3
        with:
          status: failure
          text: '❌ Production deployment failed for ${{ github.sha }}'
          fields: repo,message,commit,author,action,eventName,ref,workflow
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
        if: failure()

  # =============================================================================
  # ROLLBACK CAPABILITY
  # =============================================================================
  
  rollback:
    name: Rollback Deployment
    runs-on: ubuntu-latest
    if: failure() && (needs.deploy-staging.result == 'failure' || needs.deploy-production.result == 'failure')
    needs: [deploy-staging, deploy-production]
    environment:
      name: production
    
    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID_PROD }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY_PROD }}
          aws-region: us-west-2

      - name: Rollback to previous version
        run: |
          # Get previous task definition
          PREVIOUS_TASK_DEF=$(aws ecs list-task-definitions \
            --family-prefix causal-eval-prod \
            --status ACTIVE \
            --sort DESC \
            --query 'taskDefinitionArns[1]' \
            --output text)
          
          # Update service to use previous task definition
          aws ecs update-service \
            --cluster causal-eval-production \
            --service causal-eval-api \
            --task-definition $PREVIOUS_TASK_DEF
          
          # Wait for rollback to complete
          aws ecs wait services-stable \
            --cluster causal-eval-production \
            --services causal-eval-api

      - name: Verify rollback
        run: |
          # Health check after rollback
          curl -f https://causal-eval-bench.org/health || exit 1
          echo "Rollback completed successfully"

      - name: Notify rollback
        uses: 8398a7/action-slack@v3
        with:
          status: custom
          custom_payload: |
            {
              "text": "⚠️ Automatic rollback completed for ${{ github.sha }}",
              "color": "warning"
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

  # =============================================================================
  # POST-DEPLOYMENT TASKS
  # =============================================================================
  
  post-deployment:
    name: Post-Deployment Tasks
    runs-on: ubuntu-latest
    needs: [deploy-production]
    if: success()
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run database migrations
        run: |
          # Run any pending database migrations
          python scripts/run_migrations.py --env production

      - name: Update monitoring dashboards
        run: |
          # Update Grafana dashboards with new version info
          python scripts/update_dashboards.py --version ${{ github.sha }}

      - name: Clear CDN cache
        run: |
          # Clear CloudFront cache
          aws cloudfront create-invalidation \
            --distribution-id ${{ secrets.CLOUDFRONT_DISTRIBUTION_ID }} \
            --paths "/*"

      - name: Update status page
        run: |
          # Update status page with deployment info
          curl -X POST https://api.statuspage.io/v1/pages/${{ secrets.STATUSPAGE_PAGE_ID }}/incidents \
            -H "Authorization: OAuth ${{ secrets.STATUSPAGE_API_KEY }}" \
            -H "Content-Type: application/json" \
            -d '{
              "incident": {
                "name": "Deployment Complete",
                "status": "resolved",
                "impact_override": "none",
                "body": "Successfully deployed version ${{ github.sha }} to production."
              }
            }'

      - name: Generate deployment report
        run: |
          # Generate comprehensive deployment report
          python scripts/generate_deployment_report.py \
            --version ${{ github.sha }} \
            --environment production \
            --output deployment-report.html

      - name: Upload deployment report
        uses: actions/upload-artifact@v3
        with:
          name: deployment-report
          path: deployment-report.html

  # =============================================================================
  # PERFORMANCE MONITORING
  # =============================================================================
  
  performance-monitoring:
    name: Performance Monitoring
    runs-on: ubuntu-latest
    needs: [deploy-production]
    if: success()
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run performance baseline tests
        run: |
          # Run load tests to establish new baseline
          python scripts/performance_baseline.py \
            --target https://causal-eval-bench.org \
            --duration 600 \
            --users 100

      - name: Update performance metrics
        run: |
          # Update performance tracking database
          python scripts/update_performance_metrics.py \
            --version ${{ github.sha }} \
            --environment production

      - name: Check for performance regressions
        run: |
          # Compare with previous baselines
          python scripts/check_performance_regression.py \
            --threshold 20 \
            --alert-on-regression

  # =============================================================================
  # SECURITY VALIDATION
  # =============================================================================
  
  security-validation:
    name: Post-Deployment Security Validation
    runs-on: ubuntu-latest
    needs: [deploy-production]
    if: success()
    
    steps:
      - name: Run security scan on live environment
        run: |
          # OWASP ZAP security scan
          docker run -t owasp/zap2docker-stable zap-baseline.py \
            -t https://causal-eval-bench.org \
            -J zap-report.json

      - name: Check SSL/TLS configuration
        run: |
          # SSL Labs API scan
          python scripts/ssl_check.py --domain causal-eval-bench.org

      - name: Validate security headers
        run: |
          # Check security headers
          python scripts/security_headers_check.py --url https://causal-eval-bench.org

      - name: Upload security scan results
        uses: actions/upload-artifact@v3
        with:
          name: security-scan-results
          path: |
            zap-report.json
            ssl-report.json
            security-headers-report.json
